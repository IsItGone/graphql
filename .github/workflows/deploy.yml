name: Build and Deploy to GKE

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }} # GKE Project ID
  GAR_LOCATION: ${{ vars.GAR_LOCATION }} # Artifact Registry Zone
  GKE_CLUSTER: ${{ vars.GKE_CLUSTER }} # GKE Cluster name
  GKE_ZONE: ${{ vars.GKE_ZONE }} # GKE Zone
  DEPLOYMENT_NAME: graphql-service # Deployment Name (metadata.name)
  REPOSITORY: ${{ vars.REPOSITORY }} # Artifact Registry Repository Name
  IMAGE: "${{ vars.BASE_NAME }}-graphql-${{ vars.VERSION }}"

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      #      - name: Cache
      #        uses: actions/cache@v4.0.2
      #        with:
      #          # A list of files, directories, and wildcard patterns to cache and restore
      #          path:
      #          # An explicit key for restoring and saving the cache
      #          key:
      #          # An ordered list of keys to use for restoring stale cache if no cache hit occurred for key. Note `cache-hit` returns false in this case.
      #          restore-keys: # optional
      #          # The chunk size used to split up large files during upload, in bytes
      #          upload-chunk-size: # optional
      #          # An optional boolean when enabled, allows windows runners to save or restore caches that can be restored or saved respectively on other platforms
      #          enableCrossOsArchive: # optional, default is false
      #          # Fail the workflow if cache entry is not found
      #          fail-on-cache-miss: # optional, default is false
      #          # Check if a cache entry exists for the given input(s) (key, restore-keys) without downloading the cache
      #          lookup-only: # optional, default is false
      #          # Run the post step to save the cache even if another step before fails
      #          save-always: # optional, default is false

      - name: Checkout
        uses: actions/checkout@v4

      - name: Checkout GitOps Repository
        uses: actions/checkout@v4
        with:
          repository: isitgone/gitops
          path: gitops
          token: ${{ secrets.GITOPS_ACCESS_TOKEN }}

      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      - id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Configure Docker for GCP
        run: gcloud auth configure-docker

      #      - name: Docker configuration
      #        run: |-
      #          echo ${{ steps.auth.outputs.access_token }} | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev

      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle wrapper
        run: ./gradlew clean bootJar

      - name: Build Docker Image
        run: |-
          docker build \
            --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            .

      - name: Publish
        run: |-
          docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"

      - name: Helm Deploy
        env:
          CHART_PATH: "gitops/charts/${{ env.DEPLOYMENT_NAME }}"
        run: |
          helm upgrade --install $DEPLOYMENT_NAME $CHART_PATH --set image.tag=$GITHUB_SHA

      - name: Sync with Argo CD
        run: |
          argocd app sync $DEPLOYMENT_NAME

      - name: Wait for Deployment
        run: |
          argocd app wait $DEPLOYMENT_NAME --health --timeout 600
